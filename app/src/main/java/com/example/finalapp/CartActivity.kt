package com.example.finalapp



import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.finalapp.Adapters.CartAdapter
import com.example.finalapp.Model.MenuItemModel
import com.example.finalapp.Model.OrderModel
import com.example.finalapp.Model.UserModel
import com.example.finalapp.utils.CartStorage
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.*
import java.util.UUID

class CartActivity : AppCompatActivity() {
    private lateinit var cartRecyclerView: RecyclerView
    private lateinit var cartAdapter: CartAdapter
    private lateinit var placeOrder: Button
    private lateinit var deleteItem: Button
    private lateinit var totalV : TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_cart)


        cartRecyclerView = findViewById(R.id.cartRecycler)
        cartRecyclerView.layoutManager = LinearLayoutManager(this)
        placeOrder = findViewById(R.id.placeOrderBtn)
totalV =findViewById(R.id.totalView)
        val total = calculateTotalPrice()
totalV.text =total.toString()


        // Load items from the global cart
        cartAdapter = CartAdapter(CartStorage.cartItems.toMutableList()) { itemToDelete ->
            // Remove the item from CartStorage
            CartStorage.cartItems.remove(itemToDelete)

            // Update the adapter
            cartAdapter.removeItem(itemToDelete)
            val newTotal = calculateTotalPrice()
            totalV.text =newTotal.toString()
        }
        cartRecyclerView.adapter = cartAdapter



        placeOrder.setOnClickListener {
            placeOrder()

            val intent = Intent(this, OrderStatusActivity::class.java)
            startActivity(intent)
        }


    }

    private fun placeOrder() {
        val cartItems = CartStorage.cartItems
        if (cartItems.isNotEmpty()) {
            val currentUserUid = FirebaseAuth.getInstance().currentUser!!.uid
            val itemsMap: HashMap<String?, MenuItemModel> = HashMap(
                cartItems.associateBy { it.itemId ?: UUID.randomUUID().toString() }
            )

            val newOrder = OrderModel(
                orderId = "", // Leave it empty since it will be generated by Firebase
                userId = currentUserUid,
                items = itemsMap // itemsMap is now correctly typed as HashMap<String?, MenuItemModel>
            )

            val ordersRef = FirebaseDatabase.getInstance().getReference("orders")
            val newOrderRef = ordersRef.push()
            newOrder.orderId = newOrderRef.key
            newOrderRef.setValue(newOrder).addOnCompleteListener { orderTask ->
                // Handle order creation success or failure
                if (orderTask.isSuccessful) {
                    // Clear the global cart after placing the order
                    CartStorage.cartItems.clear()
                    cartAdapter.setMenuItems(CartStorage.cartItems)
                }
                // Optionally, handle the case where orderTask is not successful
            }
        }
    }

     fun calculateTotalPrice(): Double {
        var total = 0.0
        for (item in CartStorage.cartItems) {
            try {
                // Add the item price to the total, use 0.0 as default if itemPrice is null
                total += item.itemPrice?.toDouble() ?: 0.0
            } catch (e: NumberFormatException) {
                println("Invalid price format for item: ${item.itemPrice}")
            }
        }
        return total
    }
}





